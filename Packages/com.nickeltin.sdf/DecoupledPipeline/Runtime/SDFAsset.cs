using System.Collections.Generic;
using UnityEngine;

namespace nickeltin.SDF.Runtime.DecoupledPipeline
{
    /// <summary>
    /// Main asset for files with extension *.sdfasset
    /// This assets decouples sdf import pipeline, makes all generated sdf content an separate asset.
    /// </summary>
    public class SDFAsset : ScriptableObject
    {
        [SerializeField] internal List<SDFSpriteMetadataAsset> _spriteMetadataAssets = new();

        // private readonly Dictionary<Sprite, SDFSpriteMetadataAsset> _sdfSpriteToMetaAsset = new();
        // private readonly Dictionary<Sprite, SDFSpriteMetadataAsset> _sourceSpriteToMetaAsset = new();

        // private bool _cached;
        
        public IReadOnlyList<SDFSpriteMetadataAsset> SpriteMetadataAssets => _spriteMetadataAssets;

        // private void CacheMembers()
        // {
        //     _sdfSpriteToMetaAsset.Clear();
        //     _sourceSpriteToMetaAsset.Clear();
        //     
        //     foreach (var asset in _spriteMetadataAssets)
        //     {
        //         if (asset.Metadata.SDFSprite != null)
        //             _sdfSpriteToMetaAsset.TryAdd(asset.Metadata.SDFSprite, asset);
        //         if (asset.Metadata.SourceSprite != null)
        //             _sourceSpriteToMetaAsset.TryAdd(asset.Metadata.SourceSprite, asset);
        //     }
        //     _cached = true;
        // }
        
        /// <summary>
        /// Will try to find meta asset for either sdf sprite generated from this asset,
        /// or from source sprite that is part of the texture generated by unity.
        /// </summary>
        public bool TryGetSpriteMetadataAsset(Sprite sourceOrSDFSprite, out SDFSpriteMetadataAsset metadataAsset)
        {
            metadataAsset =_spriteMetadataAssets.Find(asset =>
                asset.Metadata.SourceSprite == sourceOrSDFSprite || asset.Metadata.SDFSprite == sourceOrSDFSprite);
            return metadataAsset != null;
            // if (!_cached)
            // {
            //     CacheMembers();
            // }
            //
            // _sdfSpriteToMetaAsset.TryGetValue(sourceOrSDFSprite, out metadataAsset);
            // if (metadataAsset == null)
            //     _sourceSpriteToMetaAsset.TryGetValue(sourceOrSDFSprite, out metadataAsset);
            //
            // return metadataAsset != null;
        }
    }
}